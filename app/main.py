import os
import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.utils.token import TokenValidationError
from dotenv import load_dotenv

# –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è Render
from .handlers import client_handlers  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å app.handlers

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='bot.log',  # –õ–æ–≥–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ —Ñ–∞–π–ª
    filemode='a'         # –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤
)

load_dotenv()

async def main():
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
        bot_token = os.getenv("BOT_TOKEN")
        if not bot_token:
            raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
            
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        bot = Bot(token=bot_token, parse_mode=ParseMode.HTML)
        dp = Dispatcher()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
        dp.include_router(client_handlers.router)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        logging.info("=== –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ===")
        print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞
        await dp.start_polling(bot)

    except TokenValidationError:
        logging.critical("‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
    except Exception as e:
        logging.error(f"üö® –û—à–∏–±–∫–∞: {str(e)}", exc_info=True)
    finally:
        logging.info("=== –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ===")
        await bot.close() if 'bot' in locals() else None

if __name__ == "__main__":
    asyncio.run(main())
