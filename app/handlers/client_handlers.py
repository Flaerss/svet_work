from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
from datetime import datetime

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from app.services.yclients_service import YClientsAPI
from app.database import get_async_db
from app.models import Client, Booking
from config import Config

router = Router()
yclients = YClientsAPI()

# -------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
# -------------------------

@router.message(Command("start"))
async def start_cmd(message: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with get_async_db() as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing_user = await db.execute(
            select(Client).where(Client.telegram_id == message.from_user.id)
        )
        existing_user = existing_user.scalar_one_or_none()

        if not existing_user:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            new_client = Client(
                telegram_id=message.from_user.id,
                phone=None,
                created_at=datetime.utcnow()
            )
            db.add(new_client)
            await db.commit()

    await message.answer(
        "üì∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ–æ—Ç–æ—Å—Ç—É–¥–∏—é SVET!\n\n"
        "üëâ –î–ª—è –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /booking\n"
        "üëâ –í–∞—à–∏ –∑–∞–ø–∏—Å–∏: /my_bookings",
        reply_markup=ReplyKeyboardRemove()
    )

@router.message(Command("booking"))
async def booking_cmd(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–∏—Å–∏"""
    await message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<b>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:MM</b>\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2023 15:30"
    )
    await state.set_state("waiting_date")

@router.message(F.text.regexp(r'\d{2}\.\d{2}\.\d{4} \d{2}:\d{2}'))
async def process_booking_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        session_date = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ YClients API
        async with get_async_db() as db:
            client = await db.execute(
                select(Client).where(Client.telegram_id == message.from_user.id))
            client = client.scalar_one()

            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å YClients
            yclients_response = await yclients.create_booking(
                client_id=client.id,
                date=session_date
            )

            if yclients_response.get("success"):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î
                new_booking = Booking(
                    client_id=client.id,
                    session_date=session_date,
                    status="active"
                )
                db.add(new_booking)
                await db.commit()

                await message.answer(
                    "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n"
                    f"–î–∞—Ç–∞: {session_date.strftime('%d.%m.%Y %H:%M')}\n"
                    "–ú—ã –Ω–∞–ø–æ–º–Ω–∏–º –≤–∞–º –∑–∞ –¥–µ–Ω—å –∏ –∑–∞ —á–∞—Å –¥–æ —Å–µ—Å—Å–∏–∏."
                )
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ —Å–∏—Å—Ç–µ–º–µ")

    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
    finally:
        await state.clear()

@router.message(Command("my_bookings"))
async def my_bookings_cmd(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with get_async_db() as db:
        bookings = await db.execute(
            select(Booking)
            .where(Booking.client_id == message.from_user.id)
            .where(Booking.status == "active")
        )
        bookings = bookings.scalars().all()

    if bookings:
        response = ["üóì –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏:"]
        for booking in bookings:
            response.append(
                f"‚Ä¢ {booking.session_date.strftime('%d.%m.%Y %H:%M')}"
            )
        await message.answer("\n".join(response))
    else:
        await message.answer("üòî –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")

# -------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# -------------------------

async def notify_booking_changes(booking_data: dict):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫"""
    async with get_async_db() as db:
        # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        pass
